# ElderNPC.gd
extends Node2D
# Этот скрипт управляет поведением NPC "Старейшина" в игровом мире

# Переменная-флаг: находится ли игрок в зоне взаимодействия?
var player_in_range: bool = false  # false - не в зоне, true - в зоне

func _ready():
	# Функция, вызываемая когда NPC появляется на сцене
	print("Старейшина загружен")  # Сообщение в консоль для отладки

# Функция, вызываемая когда тело входит в Area2D NPC
# body - параметр, содержащий ссылку на вошедшее тело (коллайдер)
func _on_area_2d_body_entered(body):
	# Проверяем: вошедшее тело - это игрок? (по имени узла)
	if body.name == "PlayerWorld":
		player_in_range = true  # Устанавливаем флаг "игрок в зоне" в true
		print("Игрок рядом со старейшиной! Нажми E для разговора")  # Сообщение для отладки
		# Сообщаем игроку, что этот NPC сейчас активен для взаимодействия
		body.nearby_npc = self  # self - ссылка на этот самый скрипт NPC

# Функция, вызываемая когда тело покидает Area2D NPC
func _on_area_2d_body_exited(body):
	# Проверяем: вышедшее тело - это игрок?
	if body.name == "PlayerWorld":
		player_in_range = false  # Устанавливаем флаг "игрок в зоне" в false
		print("Игрок отошёл от старейшины")  # Сообщение для отладки
		# Сообщаем игроку, что этот NPC больше не активен для взаимодействия
		body.nearby_npc = null  # null - специальное значение "ничего"

# Основная функция взаимодействия с NPC
# Вызывается когда игрок нажимает клавишу взаимодействия (E)
func interact():
	print("=== INTERACT ВЫЗВАН ===")  # Отладочное сообщение
	
	# Проверяем два условия:
	# 1. Игрок в зоне взаимодействия (player_in_range == true)
	# 2. Игра находится в режиме мира (можно начинать диалог)
	if player_in_range and GameStateManager.is_in_world():
		print("Начинаем диалог со старейшиной")  # Отладочное сообщение
		
		# Загружаем сцену диалогового интерфейса из файла
		var dialog_ui = load("res://Scenes/UI/DialogUI.tscn").instantiate()
		# instantiate() - создаём экземпляр (копию) загруженной сцены
		
		# Добавляем созданный диалоговый интерфейс на текущую сцену
		get_tree().current_scene.add_child(dialog_ui)
		# get_tree() - доступ к дереву сцен игры
		# current_scene - текущая активная сцена
		# add_child() - добавляем узел как дочерний
		
		# Запускаем диалог, передавая путь к JSON файлу с диалогом
		dialog_ui.start_dialogue("res://Scripts/dialog/elder_dialogue.json")
		
		# Показываем диалоговое окно (делаем видимым)
		dialog_ui.show()
